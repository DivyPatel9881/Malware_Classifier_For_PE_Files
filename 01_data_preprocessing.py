import operator
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# getting unimp features
unimp_features = {
 'AddressOfEntryPoint': 0,
 'BaseOfCode': 0,
 'BaseOfData': 0,
 'Characteristics': 1032.206797186472,
 'CheckSum': 0,
 'DllCharacteristics': 1478.4954869782816,
 'ExportNb': 0,
 'FileAlignment': 0,
 'ImageBase': 530.5361006533311,
 'ImportsNb': 0,
 'ImportsNbDLL': 0,
 'ImportsNbOrdinal': 0,
 'LoadConfigurationSize': 0,
 'LoaderFlags': 0,
 'Machine': 1082.9256010888016,
 'MajorImageVersion': 0,
 'MajorLinkerVersion': 0,
 'MajorOperatingSystemVersion': 236.61647685302975,
 'MajorSubsystemVersion': 487.3898733331374,
 'MinorImageVersion': 0,
 'MinorLinkerVersion': 0,
 'MinorOperatingSystemVersion': 0,
 'MinorSubsystemVersion': 0,
 'Name': 0,
 'NumberOfRvaAndSizes': 0,
 'ResourcesMaxEntropy': 441.8248905853912,
 'ResourcesMaxSize': 0,
 'ResourcesMeanEntropy': 0,
 'ResourcesMeanSize': 0,
 'ResourcesMinEntropy': 353.224684768646,
 'ResourcesMinSize': 8.160597671881105,
 'ResourcesNb': 0,
 'SectionAlignment': 0,
 'SectionMaxRawsize': 0,
 'SectionMaxVirtualsize': 0,
 'SectionsMaxEntropy': 580.740479410044,
 'SectionsMeanEntropy': 72.19620856510386,
 'SectionsMeanRawsize': 0,
 'SectionsMeanVirtualsize': 0,
 'SectionsMinEntropy': 158.0840575679675,
 'SectionsMinRawsize': 0,
 'SectionsMinVirtualsize': 0,
 'SectionsNb': 7.795926354766131,
 'SizeOfCode': 0,
 'SizeOfHeaders': 0,
 'SizeOfHeapCommit': 0,
 'SizeOfHeapReserve': 0,
 'SizeOfImage': 0,
 'SizeOfInitializedData': 0,
 'SizeOfOptionalHeader': 393.1119115064255,
 'SizeOfStackCommit': 0,
 'SizeOfStackReserve': 93.14759692294628,
 'SizeOfUninitializedData': 0,
 'Subsystem': 590.0487097835594,
 'VersionInformationSize': 648.0362688739431,
 'md5': 0}
unimp_features = sorted(unimp_features.items(), key=operator.itemgetter(1))
unimp_features.reverse()
unimp_features = unimp_features[17:]
for i in range(len(unimp_features)):
    unimp_features[i] = unimp_features[i][0]

# reading data
dataset = pd.read_csv('cleaned_data.csv')
dataset = dataset[dataset.columns.difference(unimp_features)]
X = dataset.iloc[:,:-1].values
y = dataset.iloc[:,-1].values

# train test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)


# from sklearn.preprocessing import OneHotEncoder
# enc = OneHotEncoder()


# one-hot encoding (Categorical Data)
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelencoder_X = LabelEncoder()

# Charaterstics
X[:, 0] = labelencoder_X.fit_transform(X[:, 0])
# onehotencoder = OneHotEncoder(categorical_features = [0])
# X = onehotencoder.fit_transform(X).toarray()

# dllCharaterstics
# X[:, 1] = labelencoder_X.fit_transform(X[:, 1])
# onehotencoder = OneHotEncoder(categorical_features = [1])
# X = onehotencoder.fit_transform(X).toarray()

# # MAchine
# X[:, 3] = labelencoder_X.fit_transform(X[:, 3])
# onehotencoder = OneHotEncoder(categorical_features = [3])
# X = onehotencoder.fit_transform(X).toarray()

# X[:, 0] = labelencoder_X.fit_transform(X[:, 0])
# onehotencoder = OneHotEncoder(categorical_features = [0])
# X = onehotencoder.fit_transform(X).toarray()

# X[:, 0] = labelencoder_X.fit_transform(X[:, 0])
# onehotencoder = OneHotEncoder(categorical_features = [0])
# X = onehotencoder.fit_transform(X).toarray()

print(X)