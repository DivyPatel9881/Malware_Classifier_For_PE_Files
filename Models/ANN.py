import keras
from keras.models import Sequential, model_from_json
from keras.layers import Dense
import os


def ANN(X_train, y_train, layers, nodes, batchSize, nbEpoch):
    num_x = len(X_train[0])
    classifier = Sequential()
    classifier.add(Dense(output_dim = nodes,input_dim=num_x, init="uniform", activation="relu"))
    for i in range(layers):
        classifier.add(Dense(output_dim = nodes,init="uniform", activation="relu"))
    classifier.add(Dense(output_dim = 1,init="uniform", activation="sigmoid"))
    classifier.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])
    classifier.fit(X_train, y_train, batch_size=batchSize, nb_epoch=nbEpoch)
    print("Model trained.")
    return classifier

def Persist(classifier):
    if os.path.exists("./trained_models/ANN.json"):
        os.remove("./trained_models/ANN.json")
    else:
        print("The file does not exist.")
    classifier_json = classifier.to_json()
    with open("./trained_models/ANN.json", "w") as json_file:
        json_file.write(classifier_json)
    classifier.save_weights("./trained_models/ANN.h5")
    print("Model stored.")

def Load():
    json_file = open('./trained_models/ANN.json', 'r')
    classifier_json = json_file.read()
    json_file.close()
    classifier = model_from_json(classifier_json)
    classifier.load_weights("./trained_models/ANN.h5")
    #print("Model loaded.")
    return classifier